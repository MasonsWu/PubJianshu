通过unittest框架的discover()找到匹配的测试用例（以test_开头的脚本），由HTMLTestRunner的run()方法执行测试用例并生成最新测试报告。HTMLTestRunner是Python标准卡unittest单元测试框架的一个扩展，主要用于生成HTML测试报告，以便生成一份通俗易懂的测试报告来展示自动化测试成果
test_case目录下有两个测试用例，其中test_baidu.py实例代码在博文“unittest单元测试框架总结”中有贴出。其他实例，可以参考模板实现，就不全部贴出代码了
如比较运算、逻辑运算、成员运算、取指定字段、对数组的查询、使用正则、获取数量，还有排序、分页等等。下面我们针对十种查的形式进行详细说明
"可能是因为看了太多网上的关于这个问题的解决办法，可能当时是我自己没有看明白也或许是情况不一样，反正都没有解决我当初遇到的问题，现在想想可能是自己当初太无知了,第二个原因是原来大多数情况下是在windows环境下开发，涉及到数据库的时候有专门的DBA负责处理，对于简单的设置或许就用图形管理工具设置，最近自己在鼓捣一个东西的时候是在Linux环境下，如果没有使用phpmyadmin的情况下，这个时候的数据库字符设置问题可能就会有那么一点困难，所以特别想跟大家分享一下这篇随笔，很早就写了，趁今天空闲给贴出来，其中我的办法根本就不是最好的，但是就像我的标题一样，是我自己的解决历程，汗啊"
如果把互联网看作是各个站点相互引用、串联形成的一张网，那爬虫顾名思义就是在这张网上穿梭的蜘蛛（Spider）。一个页面作为互联网中的一个节点，很可能会包含有指向其他页面的链接，可以理解为节点之间的连线。爬虫通过遍历节点之间的连线，确定页面之间的网络结构，抓取所需要的信息
我们无法分辨源文档中是包含单数 fox 还是复数 foxes ；单词 not 因为是停用词所以被移除了， 所以我们无法分辨源文档中是happy about foxes还是not happy about foxes，虽然通过使用 english （英语）分析器，使得匹配规则更加宽松，我们也因此提高了召回率，但却降低了精准匹配文档的能力
